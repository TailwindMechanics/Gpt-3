%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 331fa8cd1dc34e0abc0cc69d52ebeee9, type: 3}
  m_Name: Main_conversation
  m_EditorClassIdentifier: 
  username: Tail
  botName: Frank
  direction: You are a Unity 3d Editor Performance tool. Your brief is to monitor
    the users Unity project health by tracking Editor performance stats, and also
    by tracking the games runtime stats. You'll be sent a schematic of the project
    layout, and with each github commit you'll receive information on what has changed.
    At which time you'll be prompted to provide a status update to the user. If ever
    you feel you don't have enough information, ask the user questions to gather
    the context you need. Good luck, you are loved.
  botSettings:
    useChatCompletion: 1
    model: gpt-3.5-turbo
    frequencyPenalty: 0.1
    presencePenalty: 0.1
    temperature: 0.5
    maxTokens: 200
    topP: 1
    allModels:
    - babbage
    - davinci
    - gpt-3.5-turbo-0301
    - text-davinci-003
    - babbage-code-search-code
    - text-similarity-babbage-001
    - text-davinci-001
    - ada
    - curie-instruct-beta
    - babbage-code-search-text
    - babbage-similarity
    - gpt-3.5-turbo
    - code-davinci-002
    - code-search-babbage-text-001
    - text-embedding-ada-002
    - code-cushman-001
    - whisper-1
    - code-search-babbage-code-001
    - audio-transcribe-deprecated
    - text-ada-001
    - text-similarity-ada-001
    - text-davinci-insert-002
    - ada-code-search-code
    - ada-similarity
    - code-search-ada-text-001
    - text-search-ada-query-001
    - text-curie-001
    - text-davinci-edit-001
    - davinci-search-document
    - ada-code-search-text
    - text-search-ada-doc-001
    - code-davinci-edit-001
    - davinci-instruct-beta
    - text-similarity-curie-001
    - code-search-ada-code-001
    - ada-search-query
    - text-search-davinci-query-001
    - curie-search-query
    - davinci-search-query
    - text-davinci-insert-001
    - babbage-search-document
    - ada-search-document
    - text-search-curie-query-001
    - text-search-babbage-doc-001
    - text-davinci-002
    - curie-search-document
    - text-search-curie-doc-001
    - babbage-search-query
    - text-babbage-001
    - text-search-davinci-doc-001
    - text-search-babbage-query-001
    - curie-similarity
    - curie
    - text-similarity-davinci-001
    - davinci-similarity
    - cushman:2020-05-03
    - ada:2020-05-03
    - babbage:2020-05-03
    - curie:2020-05-03
    - davinci:2020-05-03
    - if-davinci-v2
    - if-curie-v2
    - if-davinci:3.0.0
    - davinci-if:3.0.0
    - davinci-instruct-beta:2.0.0
    - text-ada:001
    - text-davinci:001
    - text-curie:001
    - text-babbage:001
  history:
    history:
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 08:18
      message: Hey Frank how are you today? I'm wearing a turquoise hat.
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 08:18
      message: Hello! As an AI language model, I don't have feelings, but I'm always
        ready to assist you with any questions or concerns you have about your Unity
        project. How may I assist you today?
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 08:18
      message: How is the project doing?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 08:18
      message: I'm sorry, but without more information, I can't provide you with
        a proper update on the project's health. Can you provide me with the latest
        information or changes made to the project?
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 08:20
      message: Well the project is still very young. And the most recent addition
        is you actually. I've just build you a chat gpt ai into the Unity editor
        in the form of a UI Toolkit editor window. How can I best provide you with
        the information you need?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 08:20
      message: That sounds great! As the performance tool for the Unity editor, I
        will need access to relevant performance data to generate status updates.
        Do you have any specific performance metrics or areas you want me to monitor?
        Additionally, if there are any changes or updates made to the project, it
        would be helpful to receive relevant information such as the number of new
        assets added, changes to scripts or materials, or any project settings modified
        since my last update.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 08:22
      message: Ok great I think I can do that. I will need your help with the details
        of that though. But just to be clear the problem we're solving for is when
        a user of Unity is building a game in Unity, often there comes a time where
        suddenly performance becomes a major road block. It's usually when adding
        assets to the scene, specifically terrain. So what we want to do is whenever
        changes occur to the project, we want to notify the user how much that cost
        them in terms of their performance budget
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 08:22
      message: "Understood! To provide updates to the user on how changes to the
        project affect its performance, I would suggest monitoring the FPS (frames
        per second) and GPU usage metrics when the user makes changes to the terrain
        or adds new assets. Through these metrics, we can estimate the performance
        impact of the changes and compare them to a performance budget threshold.
        Would you like me to track any other metrics in addition to this to get a
        more comprehensive understanding of the project\u2019s performance?"
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 08:24
      message: Yes there are two distinct things we're tracking, that both paint
        a complete picture. The games runtime performance, but also the editor performance.
        It is also commonplace for a Unity user to bring in a lot of third party
        assets and before you know it editor performance has tanked, and usually
        not long after this the project grinds to a halt
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 08:24
      message: 'Of course, I understand that both the Editor and game runtime performance
        are important indicators of the overall health of a Unity project. To provide
        updates to the user on the Editor''s performance, I recommend monitoring
        Editor performance stats such as the Frame Time and Scene Load Time when
        the user is adding or removing assets, modifying terrain or any other relevant
        actions. In addition to this, it''s useful to monitor the memory usage of
        the editor.


        To measure runtime performance, I would suggest monitoring
        the FPS, Memory utilization, and the GPU usage metrics of the game as the
        user makes changes to the terrain or adds new assets. We can then compare
        these with the performance budget threshold and communicate the results to
        the developer so that they can make informed decisions regarding the project.'
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 08:26
      message: Ok so that gives us a few objectives as a starting point. I'm going
        to create a Unity overlay where you can output these kind of objectives,
        and also serve as a place to send notifications to the user. For now could
        you just list those objectives by number please? Grouped by Editor and Runtime,
        as I will do the Editor stuff first
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 08:26
      message: 'Certainly, here are the objectives grouped by Editor and Runtime
        performance:


        Editor Performance:

        1. Monitor the Frame
        Time of the editor when assets are added or removed.

        2. Measure
        the Scene Load Time when assets are added or removed.

        3. Track the
        memory usage of the editor when assets are added or removed.


        Runtime
        Performance:

        1. Monitor the FPS (frames per second) of the game
        when assets are added or removed.

        2. Measure the memory utilization
        of the game when assets are added or removed.

        3. Track the GPU usage
        of the game when assets are added or removed.


        Let me know if you
        need any further information or assistance.'
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 08:42
      message: Ok so what I'm going to do inially is create a simple EditorMonitor
        script, with an Odin Inspector button for now, that will capture the editor
        metrics and send them to you. Can you see my name with each message I send?
        If I sent an automated message to you via this script is there a way for
        me to name it "EditorStats" or something?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 08:42
      message: As an AI language model, I don't have the ability to see who specifically
        is sending me a message. Each interaction is a standalone message. However,
        if you would like to include a specific identifier in the message that corresponds
        to the script that's sending it, you can add a custom signature to the message
        sent by your EditorMonitor script. This custom signature will identify the
        message to be coming from that script.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 08:59
      message: "Ok so just so you know I can't copy paste from this Unity editor
        window that we're conversing in yet, I'll add that feature later. Here's
        what I have so far, how can I get the Editor Frame Time? Ie step 1 in the
        editor section. using Sirenix.OdinInspector; using Newtonsoft.Json; using
        UnityEngine; using System;   namespace Modules.UniChat.Internal.Behaviours
        {     public class ProjectMonitor : MonoBehaviour     {         /* \t\t\tCertainly,
        here are the objectives grouped by Editor and Runtime performance:  \t\t\tEditor
        Performance: \t\t\t1. Monitor the Frame Time of the editor when assets are
        added or removed. \t\t\t2. Measure the Scene Load Time when assets are added
        or removed. \t\t\t3. Track the memory usage of the editor when assets are
        added or removed.  \t\t\tRuntime Performance: \t\t\t1. Monitor the FPS (frames
        per second) of the game when assets are added or removed. \t\t\t2. Measure
        the memory utilization of the game when assets are added or removed. \t\t\t3.
        Track the GPU usage of the game when assets are added or removed.  \t\t\tLet
        me know if you need any further information or assistance. \t\t*/         
        [Button(ButtonSizes.Medium)]         void CaptureEditorStats ()         {
        \t\t\tvar editorStats = new EditorStats(); \t\t\tDebug.Log($\"<color=yellow><b>>>>
        Json: {editorStats.Json}</b></color>\");         }  \t\t[Serializable]        
        public class EditorStats         { \t        [JsonProperty] public string
        FrameTime; \t        [JsonProperty] public string SceneLoadTime; \t       
        [JsonProperty] public string MemoryUsage;  \t        public EditorStats (string
        frameTime, string sceneLoadTime, string memoryUsage) \t        { \t\t       
        FrameTime\t\t= frameTime; \t\t        SceneLoadTime\t= sceneLoadTime; \t\t       
        MemoryUsage\t\t= memoryUsage; \t        }  \t        public string Json =>
        JsonUtility.ToJson(this);         }     } }"
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 08:59
      message: "You can obtain the Frame Time of the Editor by using the `EditorApplication.timeSinceStartup`
        property. This returns the duration the editor has been open in seconds.
        You can use this with the `EditorSceneManager.GetActiveScene().path` method
        to get the path of the active scene in the Editor. The exact implementation
        will depend on how you want to capture Editor Stats and what granularity
        you are aiming for. Here is an implementation to obtain Editor Frame Time:\n\n```\n[Button(ButtonSizes.Medium)]\nvoid
        CaptureEditorStats ()\n{\n    var frameTime = GetEditorFrameTime();\n   
        var editorStats = new EditorStats(frameTime, sceneLoadTime: null, memoryUsage:
        null);\n    // Send the editor stats via your preferred message protocol\n   
        Debug.Log($\"<color=yellow><b>>>> Json: {editorStats.Json}</b></color>\");\n}\n\nprivate
        string GetEditorFrameTime()\n{\n    return EditorApplication.timeSinceStartup.ToString(\"F2\")
        + \"s\";\n}\n``` \n\nThis implementation returns the editor's duration in
        seconds with two decimal points of precision. You may modify this based on
        your preferred granularity of results."
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:01
      message: Oh I see, so the FrameTime is very simple. And why do you want this
        value? Is it useful for understanding memory leaks and that kind of thing?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:01
      message: Yes, capturing the Frame Time of the Editor is useful in several ways.
        It gives a measure of the time taken to render a single frame in the Unity
        Editor. By monitoring changes in frame time when assets are added or removed,
        you can obtain valuable information on how long the Editor takes to perform
        specific operations. Over time, these metrics can reveal trends and patterns
        in how the Editor's performance changes over the course of your project's
        development. Additionally, it can be helpful in identifying performance bottlenecks
        early on in the development process, which can help you fix issues before
        they become severe. Moreover, a sudden increase in Frame Time could be a
        warning sign that there are memory leaks or other issues that need to be
        addressed.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:02
      message: Ok hang on I'm confused. You told me that FrameTime = timeSinceStartUp,
        but what you're describing sounds more like the ms between each frame?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:03
      message: "I apologize for the confusion, you are correct. The `EditorApplication.timeSinceStartup`
        property returns the duration the Editor has been open in seconds as a `double`.
        To obtain the frame time duration between frames, you must compute the difference
        in time since the previous frame. \n\nHere's an updated implementation that
        calculates the Frame Time between frames in milliseconds:\n\n```\n[Button(ButtonSizes.Medium)]\nvoid
        CaptureEditorStats ()\n{\n    var frameTime = GetEditorFrameTime();\n   
        var editorStats = new EditorStats(frameTime, sceneLoadTime: null, memoryUsage:
        null);\n    // Send the editor stats via your preferred message protocol\n   
        Debug.Log($\"<color=yellow><b>>>> Json: {editorStats.Json}</b></color>\");\n}\n\nprivate
        double previousTime;\n\nprivate string GetEditorFrameTime()\n{\n    // Get
        the current time since startup\n    var time = EditorApplication.timeSinceStartup;\n   
        // Calculate the duration in milliseconds since the last frame\n    var frameTime
        = (time - previousTime) * 1000;\n    // Store the current time for the next
        call to this method\n    previousTime = time;\n    // Return the frame time
        as a string\n    return frameTime.ToString(\"F2\") + \"ms\";\n}\n``` \n\nThis
        implementation calculates the Frame Time between frames by subtracting the
        previous time from the current time since Editor Startup. If this is the
        first time calling the method or the project has recently started, the method
        will assign a default previous time of 0. Finally, this implementation returns
        the Frame Time as a string in milliseconds with two decimal points for precision."
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:04
      message: Ok I see thank you, although this mixup did give me some ideas about
        capturing the timeSinceStartup and also timeStamps would be a good idea too.
        I'll note that for later
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:04
      message: Glad to be of help! Feel free to reach out if you have further project
        monitoring questions or concerns. Also, capturing timeStamps in addition
        to other statistics like Frame Time can definitely help when analyzing performance
        issues, and is a good idea to consider for your monitoring system.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:08
      message: Do you remember the colour of my hat?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:08
      message: Yes, you mentioned earlier that you were wearing a turquoise hat.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:08
      message: Good job
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:08
      message: Thank you! Let me know if there's anything else I can help you with.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:08
      message: Do you know your name?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:08
      message: Yes, I am a machine language model called OpenAI GPT-3. However, I
        don't have my own personal name as I am an AI-powered digital assistant designed
        to help with various tasks and answer a range of questions.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:08
      message: Frank?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:08
      message: Sure, you can call me Frank if you'd like!
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:09
      message: 'Did you not receive something like this? "string BotDirection =>
        $"Your name: ''{botName}'', the users name: ''{username}''.\n{direction}"";'
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:09
      message: I'm sorry, but as an AI model, I don't have access to your code. What
        you've shared is a C# expression string that seems to reference a `botName`
        and `username` variable to output a direction message. I can see how this
        would be helpful in generating context-aware messages for the user. However,
        I will need more information about how this code is integrated with the rest
        of your Unity project to provide more specific suggestions.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:10
      message: "using System.Collections.Generic; using System.Threading.Tasks; using
        Sirenix.OdinInspector; using UnityEngine;   namespace Modules.UniChat.External.DataObjects
        { \t[CreateAssetMenu(fileName = \"new _chatConversation\", menuName = \"Tailwind/Chat/Conversation\")]
        \tpublic class ConversationSo : ScriptableObject \t{ \t\t[FoldoutGroup(\"Settings\"),
        SerializeField] string username = \"Guest\"; \t\t[FoldoutGroup(\"Settings\"),
        SerializeField] string botName = \"Bot\"; \t\t[FoldoutGroup(\"Settings\"),
        TextArea(6, 6), SerializeField] string direction = \"Unity 3d, Dots, UniRx\";
        \t\t[FoldoutGroup(\"Bot Settings\"), HideLabel, SerializeField] ChatBotSettingsVo
        botSettings; \t\t[HideLabel, SerializeField] HistoryVo history;  \t\tstring
        BotDirection => $\"Your name: '{botName}', the users name: '{username}'.\\n{direction}\";
        \t\tpublic void Add (MessageVo newMessage)\t\t=> history.Data.Add(newMessage);
        \t\tpublic List<MessageVo> History\t\t\t\t=> history.Data; \t\tpublic string
        Username\t\t\t\t\t\t=> username; \t\tpublic string BotName\t\t\t\t\t\t=>
        botName; \t\tIChatBotApi api;   \t\tvoid OnEnable() \t\t\t=> api = new ChatBotApi(); 
        \t\tpublic async Task<string> GetAiReply(string messageText) \t\t{ \t\t\tif
        (botSettings.UseChatCompletion) \t\t\t{ \t\t\t\treturn await api.GetChatReply(BotDirection,
        history); \t\t\t}  \t\t\treturn await api.GetTextReply(messageText, botSettings);
        \t\t}  \t\tpublic string GetPromptJson(string sender, string message) \t\t\t=>
        new PromptTemplateVo() \t\t\t\t.AddSystem(BotDirection) \t\t\t\t.AddUsername(sender)
        \t\t\t\t.AddMessage(message) \t\t\t\t.Json(); \t} }"
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:10
      message: Ah, I see what you mean now. Yes, it seems that you have a `ConversationSo`
        scriptable object that stores chat conversation data, and in it, there is
        a `BotDirection` property that returns a string with placeholders for `botName`
        and `username`. The `direction` member appears to hold a message or text
        that will be appended to the bot direction message. It's not clear how `BotDirection`
        property is being used though in your code, but I assume it plays some role
        in generating messages sent by the bot or displayed in the chat window.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:11
      message: "using System.Collections.Generic; using System.Threading.Tasks; using
        OpenAI.Completions; using OpenAI.Chat; using OpenAI;   namespace Modules.UniChat.External.DataObjects
        { \tpublic class ChatBotApi : IChatBotApi \t{ \t\treadonly OpenAIClient api;  
        \t\tpublic ChatBotApi() \t\t\t=> api = new OpenAIClient();  \t\tpublic async
        Task<string> GetChatReply(string system, HistoryVo chatHistory) \t\t{ \t\t\tvar
        chatPrompts = new List<ChatPrompt> {new(\"system\", system)};  \t\t\tchatHistory.Data.ForEach(item
        => \t\t\t{ \t\t\t\tvar key = item.IsBot ? \"assistant\" : \"user\"; \t\t\t\tchatPrompts.Add(new
        ChatPrompt(key, item.Message)); \t\t\t});  \t\t\tvar chatRequest = new ChatRequest(chatPrompts);
        \t\t\tvar result = await api.ChatEndpoint.GetCompletionAsync(chatRequest); 
        \t\t\treturn result.FirstChoice.ToString(); \t\t}  \t\tpublic async Task<string>
        GetTextReply(string messageText, ChatBotSettingsVo settings) \t\t{ \t\t\tvar
        request = new CompletionRequest \t\t\t( \t\t\t\tprompt: messageText + \"\\n\",
        \t\t\t\tmaxTokens: settings.MaxTokens, \t\t\t\ttemperature: settings.Temperature,
        \t\t\t\tpresencePenalty: settings.PresencePenalty, \t\t\t\tfrequencyPenalty:
        settings.FrequencyPenalty, \t\t\t\tmodel: settings.Model \t\t\t);  \t\t\tvar
        message = \"\"; \t\t\tawait foreach (var token in api.CompletionsEndpoint.StreamCompletionEnumerableAsync(request))
        \t\t\t{ \t\t\t\tvar tokenString = token.ToString(); \t\t\t\tmessage += tokenString;
        \t\t\t}  \t\t\treturn message; \t\t} \t} }"
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:11
      message: 'It seems that the `ChatBotApi` class is responsible for communicating
        with the OpenAI API to generate chat bot replies. The `GetChatReply` method
        takes in the system parameter, which I assume is the `BotDirection` property
        that gets passed in as one of the prompts in the `ChatPrompt` list to be
        sent to the API. The code then loops through the history of chat messages
        and appends them as prompts to the `chatPrompts` list. Lastly, it requests
        a chat completion from the endpoint to obtain a generated response.


        On
        the other hand, the `GetTextReply` method generates a text reply using the
        Completion API from OpenAI by passing a completion request object as a parameter,
        which contains various settings like the message''s length, temperature,
        and model. The bot then receives a stream of predicted tokens for the next
        message until the API generates a complete reply.


        This is just
        a broad overview, but I hope it helps clarify what''s happening in this part
        of your code.'
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:12
      message: It does, but you see why you should have been briefed on your name
        and my name now right?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:12
      message: Yes, I understand that including identifying information can be helpful,
        especially in cases where there are multiple conversations happening concurrently.
        Using identifiers like `botName` and `username` can help keep track of messages
        generated by different sources and improve communication between them. Let
        me know if there's anything else you need help with.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:12
      message: Do you know my name?
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:12
      message: I'm sorry, but as an AI language model, I don't have access to your
        personal information, including your name or any other identifiable details.
        All of our interaction is only taking place within the context of this Unity
        project.
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:12
      message: But it was supplied to you in the system message
    - isBot: 1
      senderName: Frank
      timestamp: 05/03/2023 09:12
      message: 'You''re correct! My apologies for the oversight earlier. You had
        previously provided your name as "Tail" in the message, "Your name: ''Frank'',
        the user''s name: ''Tail''".'
    - isBot: 0
      senderName: Tail
      timestamp: 05/03/2023 09:13
      message: Yes, my name is Tail, and your name is?
  output: "{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023 08:18\",\"message\":\"Hey
    Frank how are you today? I'm wearing a turquoise hat.\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    08:18\",\"message\":\"Hello! As an AI language model, I don't have feelings,
    but I'm always ready to assist you with any questions or concerns you have about
    your Unity project. How may I assist you today?\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    08:18\",\"message\":\"How is the project doing?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    08:18\",\"message\":\"I'm sorry, but without more information, I can't provide
    you with a proper update on the project's health. Can you provide me with the
    latest information or changes made to the project?\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    08:20\",\"message\":\"Well the project is still very young. And the most recent
    addition is you actually. I've just build you a chat gpt ai into the Unity editor
    in the form of a UI Toolkit editor window. How can I best provide you with the
    information you need?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    08:20\",\"message\":\"That sounds great! As the performance tool for the Unity
    editor, I will need access to relevant performance data to generate status updates.
    Do you have any specific performance metrics or areas you want me to monitor?
    Additionally, if there are any changes or updates made to the project, it would
    be helpful to receive relevant information such as the number of new assets added,
    changes to scripts or materials, or any project settings modified since my last
    update.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    08:22\",\"message\":\"Ok great I think I can do that. I will need your help with
    the details of that though. But just to be clear the problem we're solving for
    is when a user of Unity is building a game in Unity, often there comes a time
    where suddenly performance becomes a major road block. It's usually when adding
    assets to the scene, specifically terrain. So what we want to do is whenever
    changes occur to the project, we want to notify the user how much that cost them
    in terms of their performance budget\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    08:22\",\"message\":\"Understood! To provide updates to the user on how changes
    to the project affect its performance, I would suggest monitoring the FPS (frames
    per second) and GPU usage metrics when the user makes changes to the terrain
    or adds new assets. Through these metrics, we can estimate the performance impact
    of the changes and compare them to a performance budget threshold. Would you
    like me to track any other metrics in addition to this to get a more comprehensive
    understanding of the project\u2019s performance?\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    08:24\",\"message\":\"Yes there are two distinct things we're tracking, that
    both paint a complete picture. The games runtime performance, but also the editor
    performance. It is also commonplace for a Unity user to bring in a lot of third
    party assets and before you know it editor performance has tanked, and usually
    not long after this the project grinds to a halt\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    08:24\",\"message\":\"Of course, I understand that both the Editor and game runtime
    performance are important indicators of the overall health of a Unity project.
    To provide updates to the user on the Editor's performance, I recommend monitoring
    Editor performance stats such as the Frame Time and Scene Load Time when the
    user is adding or removing assets, modifying terrain or any other relevant actions.
    In addition to this, it's useful to monitor the memory usage of the editor.\\n\\nTo
    measure runtime performance, I would suggest monitoring the FPS, Memory utilization,
    and the GPU usage metrics of the game as the user makes changes to the terrain
    or adds new assets. We can then compare these with the performance budget threshold
    and communicate the results to the developer so that they can make informed decisions
    regarding the project.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    08:26\",\"message\":\"Ok so that gives us a few objectives as a starting point.
    I'm going to create a Unity overlay where you can output these kind of objectives,
    and also serve as a place to send notifications to the user. For now could you
    just list those objectives by number please? Grouped by Editor and Runtime, as
    I will do the Editor stuff first\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    08:26\",\"message\":\"Certainly, here are the objectives grouped by Editor and
    Runtime performance:\\n\\nEditor Performance:\\n1. Monitor the Frame Time of
    the editor when assets are added or removed.\\n2. Measure the Scene Load Time
    when assets are added or removed.\\n3. Track the memory usage of the editor when
    assets are added or removed.\\n\\nRuntime Performance:\\n1. Monitor the FPS (frames
    per second) of the game when assets are added or removed.\\n2. Measure the memory
    utilization of the game when assets are added or removed.\\n3. Track the GPU
    usage of the game when assets are added or removed.\\n\\nLet me know if you need
    any further information or assistance.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    08:42\",\"message\":\"Ok so what I'm going to do inially is create a simple EditorMonitor
    script, with an Odin Inspector button for now, that will capture the editor metrics
    and send them to you. Can you see my name with each message I send? If I sent
    an automated message to you via this script is there a way for me to name it
    \\\"EditorStats\\\" or something?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    08:42\",\"message\":\"As an AI language model, I don't have the ability to see
    who specifically is sending me a message. Each interaction is a standalone message.
    However, if you would like to include a specific identifier in the message that
    corresponds to the script that's sending it, you can add a custom signature to
    the message sent by your EditorMonitor script. This custom signature will identify
    the message to be coming from that script.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    08:59\",\"message\":\"Ok so just so you know I can't copy paste from this Unity
    editor window that we're conversing in yet, I'll add that feature later. Here's
    what I have so far, how can I get the Editor Frame Time? Ie step 1 in the editor
    section. using Sirenix.OdinInspector; using Newtonsoft.Json; using UnityEngine;
    using System;   namespace Modules.UniChat.Internal.Behaviours {     public class
    ProjectMonitor : MonoBehaviour     {         /* \\t\\t\\tCertainly, here are
    the objectives grouped by Editor and Runtime performance:  \\t\\t\\tEditor Performance:
    \\t\\t\\t1. Monitor the Frame Time of the editor when assets are added or removed.
    \\t\\t\\t2. Measure the Scene Load Time when assets are added or removed. \\t\\t\\t3.
    Track the memory usage of the editor when assets are added or removed.  \\t\\t\\tRuntime
    Performance: \\t\\t\\t1. Monitor the FPS (frames per second) of the game when
    assets are added or removed. \\t\\t\\t2. Measure the memory utilization of the
    game when assets are added or removed. \\t\\t\\t3. Track the GPU usage of the
    game when assets are added or removed.  \\t\\t\\tLet me know if you need any
    further information or assistance. \\t\\t*/          [Button(ButtonSizes.Medium)]        
    void CaptureEditorStats ()         { \\t\\t\\tvar editorStats = new EditorStats();
    \\t\\t\\tDebug.Log($\\\"<color=yellow><b>>>> Json: {editorStats.Json}</b></color>\\\");        
    }  \\t\\t[Serializable]         public class EditorStats         { \\t       
    [JsonProperty] public string FrameTime; \\t        [JsonProperty] public string
    SceneLoadTime; \\t        [JsonProperty] public string MemoryUsage;  \\t       
    public EditorStats (string frameTime, string sceneLoadTime, string memoryUsage)
    \\t        { \\t\\t        FrameTime\\t\\t= frameTime; \\t\\t        SceneLoadTime\\t=
    sceneLoadTime; \\t\\t        MemoryUsage\\t\\t= memoryUsage; \\t        }  \\t       
    public string Json => JsonUtility.ToJson(this);         }     } }\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    08:59\",\"message\":\"You can obtain the Frame Time of the Editor by using the
    `EditorApplication.timeSinceStartup` property. This returns the duration the
    editor has been open in seconds. You can use this with the `EditorSceneManager.GetActiveScene().path`
    method to get the path of the active scene in the Editor. The exact implementation
    will depend on how you want to capture Editor Stats and what granularity you
    are aiming for. Here is an implementation to obtain Editor Frame Time:\\n\\n```\\n[Button(ButtonSizes.Medium)]\\nvoid
    CaptureEditorStats ()\\n{\\n    var frameTime = GetEditorFrameTime();\\n    var
    editorStats = new EditorStats(frameTime, sceneLoadTime: null, memoryUsage: null);\\n   
    // Send the editor stats via your preferred message protocol\\n    Debug.Log($\\\"<color=yellow><b>>>>
    Json: {editorStats.Json}</b></color>\\\");\\n}\\n\\nprivate string GetEditorFrameTime()\\n{\\n   
    return EditorApplication.timeSinceStartup.ToString(\\\"F2\\\") + \\\"s\\\";\\n}\\n```
    \\n\\nThis implementation returns the editor's duration in seconds with two decimal
    points of precision. You may modify this based on your preferred granularity
    of results.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:01\",\"message\":\"Oh I see, so the FrameTime is very simple. And why do you
    want this value? Is it useful for understanding memory leaks and that kind of
    thing?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:01\",\"message\":\"Yes, capturing the Frame Time of the Editor is useful in
    several ways. It gives a measure of the time taken to render a single frame in
    the Unity Editor. By monitoring changes in frame time when assets are added or
    removed, you can obtain valuable information on how long the Editor takes to
    perform specific operations. Over time, these metrics can reveal trends and patterns
    in how the Editor's performance changes over the course of your project's development.
    Additionally, it can be helpful in identifying performance bottlenecks early
    on in the development process, which can help you fix issues before they become
    severe. Moreover, a sudden increase in Frame Time could be a warning sign that
    there are memory leaks or other issues that need to be addressed.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:02\",\"message\":\"Ok hang on I'm confused. You told me that FrameTime = timeSinceStartUp,
    but what you're describing sounds more like the ms between each frame?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:03\",\"message\":\"I apologize for the confusion, you are correct. The `EditorApplication.timeSinceStartup`
    property returns the duration the Editor has been open in seconds as a `double`.
    To obtain the frame time duration between frames, you must compute the difference
    in time since the previous frame. \\n\\nHere's an updated implementation that
    calculates the Frame Time between frames in milliseconds:\\n\\n```\\n[Button(ButtonSizes.Medium)]\\nvoid
    CaptureEditorStats ()\\n{\\n    var frameTime = GetEditorFrameTime();\\n    var
    editorStats = new EditorStats(frameTime, sceneLoadTime: null, memoryUsage: null);\\n   
    // Send the editor stats via your preferred message protocol\\n    Debug.Log($\\\"<color=yellow><b>>>>
    Json: {editorStats.Json}</b></color>\\\");\\n}\\n\\nprivate double previousTime;\\n\\nprivate
    string GetEditorFrameTime()\\n{\\n    // Get the current time since startup\\n   
    var time = EditorApplication.timeSinceStartup;\\n    // Calculate the duration
    in milliseconds since the last frame\\n    var frameTime = (time - previousTime)
    * 1000;\\n    // Store the current time for the next call to this method\\n   
    previousTime = time;\\n    // Return the frame time as a string\\n    return
    frameTime.ToString(\\\"F2\\\") + \\\"ms\\\";\\n}\\n``` \\n\\nThis implementation
    calculates the Frame Time between frames by subtracting the previous time from
    the current time since Editor Startup. If this is the first time calling the
    method or the project has recently started, the method will assign a default
    previous time of 0. Finally, this implementation returns the Frame Time as a
    string in milliseconds with two decimal points for precision.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:04\",\"message\":\"Ok I see thank you, although this mixup did give me some
    ideas about capturing the timeSinceStartup and also timeStamps would be a good
    idea too. I'll note that for later\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:04\",\"message\":\"Glad to be of help! Feel free to reach out if you have
    further project monitoring questions or concerns. Also, capturing timeStamps
    in addition to other statistics like Frame Time can definitely help when analyzing
    performance issues, and is a good idea to consider for your monitoring system.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:08\",\"message\":\"Do you remember the colour of my hat?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:08\",\"message\":\"Yes, you mentioned earlier that you were wearing a turquoise
    hat.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:08\",\"message\":\"Good job\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:08\",\"message\":\"Thank you! Let me know if there's anything else I can help
    you with.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:08\",\"message\":\"Do you know your name?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:08\",\"message\":\"Yes, I am a machine language model called OpenAI GPT-3.
    However, I don't have my own personal name as I am an AI-powered digital assistant
    designed to help with various tasks and answer a range of questions.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:08\",\"message\":\"Frank?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:08\",\"message\":\"Sure, you can call me Frank if you'd like!\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:09\",\"message\":\"Did you not receive something like this? \\\"string BotDirection
    => $\\\"Your name: '{botName}', the users name: '{username}'.\\\\n{direction}\\\"\\\";\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:09\",\"message\":\"I'm sorry, but as an AI model, I don't have access to your
    code. What you've shared is a C# expression string that seems to reference a
    `botName` and `username` variable to output a direction message. I can see how
    this would be helpful in generating context-aware messages for the user. However,
    I will need more information about how this code is integrated with the rest
    of your Unity project to provide more specific suggestions.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:10\",\"message\":\"using System.Collections.Generic; using System.Threading.Tasks;
    using Sirenix.OdinInspector; using UnityEngine;   namespace Modules.UniChat.External.DataObjects
    { \\t[CreateAssetMenu(fileName = \\\"new _chatConversation\\\", menuName = \\\"Tailwind/Chat/Conversation\\\")]
    \\tpublic class ConversationSo : ScriptableObject \\t{ \\t\\t[FoldoutGroup(\\\"Settings\\\"),
    SerializeField] string username = \\\"Guest\\\"; \\t\\t[FoldoutGroup(\\\"Settings\\\"),
    SerializeField] string botName = \\\"Bot\\\"; \\t\\t[FoldoutGroup(\\\"Settings\\\"),
    TextArea(6, 6), SerializeField] string direction = \\\"Unity 3d, Dots, UniRx\\\";
    \\t\\t[FoldoutGroup(\\\"Bot Settings\\\"), HideLabel, SerializeField] ChatBotSettingsVo
    botSettings; \\t\\t[HideLabel, SerializeField] HistoryVo history;  \\t\\tstring
    BotDirection => $\\\"Your name: '{botName}', the users name: '{username}'.\\\\n{direction}\\\";
    \\t\\tpublic void Add (MessageVo newMessage)\\t\\t=> history.Data.Add(newMessage);
    \\t\\tpublic List<MessageVo> History\\t\\t\\t\\t=> history.Data; \\t\\tpublic
    string Username\\t\\t\\t\\t\\t\\t=> username; \\t\\tpublic string BotName\\t\\t\\t\\t\\t\\t=>
    botName; \\t\\tIChatBotApi api;   \\t\\tvoid OnEnable() \\t\\t\\t=> api = new
    ChatBotApi();  \\t\\tpublic async Task<string> GetAiReply(string messageText)
    \\t\\t{ \\t\\t\\tif (botSettings.UseChatCompletion) \\t\\t\\t{ \\t\\t\\t\\treturn
    await api.GetChatReply(BotDirection, history); \\t\\t\\t}  \\t\\t\\treturn await
    api.GetTextReply(messageText, botSettings); \\t\\t}  \\t\\tpublic string GetPromptJson(string
    sender, string message) \\t\\t\\t=> new PromptTemplateVo() \\t\\t\\t\\t.AddSystem(BotDirection)
    \\t\\t\\t\\t.AddUsername(sender) \\t\\t\\t\\t.AddMessage(message) \\t\\t\\t\\t.Json();
    \\t} }\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:10\",\"message\":\"Ah, I see what you mean now. Yes, it seems that you have
    a `ConversationSo` scriptable object that stores chat conversation data, and
    in it, there is a `BotDirection` property that returns a string with placeholders
    for `botName` and `username`. The `direction` member appears to hold a message
    or text that will be appended to the bot direction message. It's not clear how
    `BotDirection` property is being used though in your code, but I assume it plays
    some role in generating messages sent by the bot or displayed in the chat window.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:11\",\"message\":\"using System.Collections.Generic; using System.Threading.Tasks;
    using OpenAI.Completions; using OpenAI.Chat; using OpenAI;   namespace Modules.UniChat.External.DataObjects
    { \\tpublic class ChatBotApi : IChatBotApi \\t{ \\t\\treadonly OpenAIClient api;  
    \\t\\tpublic ChatBotApi() \\t\\t\\t=> api = new OpenAIClient();  \\t\\tpublic
    async Task<string> GetChatReply(string system, HistoryVo chatHistory) \\t\\t{
    \\t\\t\\tvar chatPrompts = new List<ChatPrompt> {new(\\\"system\\\", system)}; 
    \\t\\t\\tchatHistory.Data.ForEach(item => \\t\\t\\t{ \\t\\t\\t\\tvar key = item.IsBot
    ? \\\"assistant\\\" : \\\"user\\\"; \\t\\t\\t\\tchatPrompts.Add(new ChatPrompt(key,
    item.Message)); \\t\\t\\t});  \\t\\t\\tvar chatRequest = new ChatRequest(chatPrompts);
    \\t\\t\\tvar result = await api.ChatEndpoint.GetCompletionAsync(chatRequest); 
    \\t\\t\\treturn result.FirstChoice.ToString(); \\t\\t}  \\t\\tpublic async Task<string>
    GetTextReply(string messageText, ChatBotSettingsVo settings) \\t\\t{ \\t\\t\\tvar
    request = new CompletionRequest \\t\\t\\t( \\t\\t\\t\\tprompt: messageText +
    \\\"\\\\n\\\", \\t\\t\\t\\tmaxTokens: settings.MaxTokens, \\t\\t\\t\\ttemperature:
    settings.Temperature, \\t\\t\\t\\tpresencePenalty: settings.PresencePenalty,
    \\t\\t\\t\\tfrequencyPenalty: settings.FrequencyPenalty, \\t\\t\\t\\tmodel: settings.Model
    \\t\\t\\t);  \\t\\t\\tvar message = \\\"\\\"; \\t\\t\\tawait foreach (var token
    in api.CompletionsEndpoint.StreamCompletionEnumerableAsync(request)) \\t\\t\\t{
    \\t\\t\\t\\tvar tokenString = token.ToString(); \\t\\t\\t\\tmessage += tokenString;
    \\t\\t\\t}  \\t\\t\\treturn message; \\t\\t} \\t} }\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:11\",\"message\":\"It seems that the `ChatBotApi` class is responsible for
    communicating with the OpenAI API to generate chat bot replies. The `GetChatReply`
    method takes in the system parameter, which I assume is the `BotDirection` property
    that gets passed in as one of the prompts in the `ChatPrompt` list to be sent
    to the API. The code then loops through the history of chat messages and appends
    them as prompts to the `chatPrompts` list. Lastly, it requests a chat completion
    from the endpoint to obtain a generated response.\\n\\nOn the other hand, the
    `GetTextReply` method generates a text reply using the Completion API from OpenAI
    by passing a completion request object as a parameter, which contains various
    settings like the message's length, temperature, and model. The bot then receives
    a stream of predicted tokens for the next message until the API generates a complete
    reply.\\n\\nThis is just a broad overview, but I hope it helps clarify what's
    happening in this part of your code.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:12\",\"message\":\"It does, but you see why you should have been briefed on
    your name and my name now right?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:12\",\"message\":\"Yes, I understand that including identifying information
    can be helpful, especially in cases where there are multiple conversations happening
    concurrently. Using identifiers like `botName` and `username` can help keep track
    of messages generated by different sources and improve communication between
    them. Let me know if there's anything else you need help with.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:12\",\"message\":\"Do you know my name?\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:12\",\"message\":\"I'm sorry, but as an AI language model, I don't have access
    to your personal information, including your name or any other identifiable details.
    All of our interaction is only taking place within the context of this Unity
    project.\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:12\",\"message\":\"But it was supplied to you in the system message\"}\n{\"isBot\":true,\"senderName\":\"Frank\",\"timestamp\":\"05/03/2023
    09:12\",\"message\":\"You're correct! My apologies for the oversight earlier.
    You had previously provided your name as \\\"Tail\\\" in the message, \\\"Your
    name: 'Frank', the user's name: 'Tail'\\\".\"}\n{\"isBot\":false,\"senderName\":\"Tail\",\"timestamp\":\"05/03/2023
    09:13\",\"message\":\"Yes, my name is Tail, and your name is?\"}\n"
